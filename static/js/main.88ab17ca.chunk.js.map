{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","constants.js","App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","searchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","store","useEffect","filterRobots","filter","robot","toLowerCase","includes","SearchBox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initalStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.88ab17ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${props.id}?200x200`}></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    \r\n    const cardComponent = robots.map((user,i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst searchBox = ({searchfield,searchChange}) => {\r\n\r\n    return (\r\n        <div\r\n            className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n                >\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default searchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{ overflowY: 'scroll', height:'800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useEffect } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from './actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nfunction App(store) {\r\n\r\n    const { searchField, onSearchChange, robots, isPending } = store;\r\n\r\n    useEffect(() => {\r\n        store.onRequestRobots();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n    const filterRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? <h1 className='tc'> Loading...</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robot Friends</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filterRobots} />\r\n                    </ErrorBoundry>\r\n\r\n                </Scroll>\r\n\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(dispatch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })))\r\n}\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initalStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state = initalStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error : ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer,\n   applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}